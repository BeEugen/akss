@article{smr-lamport,
author = {Lamport, Leslie},
title = {Time, clocks, and the ordering of events in a distributed system},
year = {1978},
issue_date = {July 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {7},
issn = {0001-0782},
url = {https://doi.org/10.1145/359545.359563},
doi = {10.1145/359545.359563},
abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
journal = {Commun. ACM},
month = {jul},
pages = {558–565},
numpages = {8},
keywords = {multiprocess systems, distributed systems, computer networks, clock synchronization}
}

@article{smr-schneider,
author = {Schneider, Fred B.},
title = {Implementing fault-tolerant services using the state machine approach: a tutorial},
year = {1990},
issue_date = {Dec. 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/98163.98167},
doi = {10.1145/98163.98167},
abstract = {The state machine approach is a general method for implementing fault-tolerant services in distributed systems. This paper reviews the approach and describes protocols for two different failure models—Byzantine and fail stop. Systems reconfiguration techniques for removing faulty components and integrating repaired components are also discussed.},
journal = {ACM Comput. Surv.},
month = {dec},
pages = {299–319},
numpages = {21}
}

@article{byzantine-generals-problem,
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
title = {The Byzantine Generals Problem},
year = {1982},
issue_date = {July 1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/357172.357176},
doi = {10.1145/357172.357176},
journal = {ACM Trans. Program. Lang. Syst.},
month = {jul},
pages = {382–401},
numpages = {20}
}

@inproceedings{pbft,
author = {Castro, Miguel and Liskov, Barbara},
title = {Practical Byzantine fault tolerance},
year = {1999},
isbn = {1880446391},
publisher = {USENIX Association},
address = {USA},
booktitle = {Proceedings of the Third Symposium on Operating Systems Design and Implementation},
pages = {173–186},
numpages = {14},
location = {New Orleans, Louisiana, USA},
series = {OSDI '99}
}

@inproceedings{pbft-optimization,
author = {Castro, Miguel and Liskov, Barbara},
booktitle={2001 International Conference on Dependable Systems and Networks}, 
title={Byzantine fault tolerance can be fast}, 
year={2001},
volume={},
number={},
pages={513-518},
keywords={Fault tolerance;Fault tolerant systems;Libraries;File systems;Computer science;Protocols;Optimization;Laboratories;Production systems;Availability},
doi={10.1109/DSN.2001.941437}
}

@inproceedings{hotstuff,
author = {Yin, Maofan and Malkhi, Dahlia and Reiter, Michael K. and Gueta, Guy Golan and Abraham, Ittai},
title = {HotStuff: BFT Consensus with Linearity and Responsiveness},
year = {2019},
isbn = {9781450362177},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3293611.3331591},
doi = {10.1145/3293611.3331591},
abstract = {We present HotStuff, a leader-based Byzantine fault-tolerant replication protocol for the partially synchronous model. Once network communication becomes synchronous, HotStuff enables a correct leader to drive the protocol to consensus at the pace of actual (vs. maximum) network delay--a property called responsiveness---and with communication complexity that is linear in the number of replicas. To our knowledge, HotStuff is the first partially synchronous BFT replication protocol exhibiting these combined properties. Its simplicity enables it to be further pipelined and simplified into a practical, concise protocol for building large-scale replication services.},
booktitle = {Proceedings of the 2019 ACM Symposium on Principles of Distributed Computing},
pages = {347–356},
numpages = {10},
keywords = {scalability, responsiveness, consensus, byzantine fault tolerance, blockchain},
location = {Toronto ON, Canada},
series = {PODC '19}
}
